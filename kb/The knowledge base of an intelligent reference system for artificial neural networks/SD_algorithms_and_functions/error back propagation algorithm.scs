sc_node_not_relation->error_back_propagation_algorithm;;
sc_node_not_relation->multilayer_perceptron;;
sc_node_not_relation->gradient;;
sc_node_not_relation->learning_process;;
sc_node_not_relation->calculation_method;;
sc_node_not_relation->direct_distribution_neural_network;;
sc_node_not_relation->algorithm;; 
sc_node_not_relation->algorithm_x;; 

sc_node_norole_relation->nrel_weight;;


error_back_propagation_algorithm=> nrel_main_idtf: [Алгоритм обратного распространения ошибки ](* <- lang_ru;; *);;
error_back_propagation_algorithm=> nrel_main_idtf: [error back propagation algorithm](* <- lang_en;; *);;
definition ->...
(*
->rrel_key_sc_element: error_back_propagation_algorithm;;
<= nrel_sc_text_translation: ...(*->rrel_example:[Алгоритм обратного распространения ошибки  — метод вычисления градиента, который используется при обновлении весов многослойного перцептрона.](*<-lang_ru;;*);;*);;
=> nrel_main_idtf: [Определение (Алгоритм обратного распространения ошибки)](*<- lang_ru;;*);;
=> nrel_using_constants:
{ 
 gradient;
 calculation_method;
nrel_weight;
multilayer_perceptron
};;
*);; 

statement ->...
(*
->rrel_key_sc_element: error_back_propagation_algorithm;;
<= nrel_sc_text_translation: ...(*->rrel_example:[Алгоритм обратного распространения ошибки изпользуется для обучения плоскослоистых нейронных сетей прямого распространения.](*<-lang_ru;;*);;*);;
=> nrel_main_idtf: [Утверждение(Алгоритм обратного распространения ошибки)](*<- lang_ru;;*);;
=> nrel_using_constants:
{
learning_process;
direct_distribution_neural_network
};;
*);;
algorithm_x<-rrel_example:error_back_propagation_algorithm;;
error_back_propagation_algorithm<=nrel_inclusion:algorithm;;

error_back_propagation_algorithm<-rrel_explored_concept: section_subject_domain_of_algorithms_and_functions;;





























