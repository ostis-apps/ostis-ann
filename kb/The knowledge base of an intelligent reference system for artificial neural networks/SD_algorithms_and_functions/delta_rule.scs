sc_node_not_relation -> concept_delta_rule;;

sc_node_not_relation -> concept_method;;
sc_node_not_relation -> concept_training;;
sc_node_not_relation -> concept_perceptron;;
sc_node_not_relation -> concept_principle;;
sc_node_not_relation -> concept_descent;;
sc_node_not_relation -> concept_surface;;
sc_node_not_relation -> concept_error;;

sc_node_norole_relation -> nrel_lead;;

concept_delta_rule => nrel_main_idtf: [Дельта правило](* <- lang_ru;; *);;
concept_delta_rule => nrel_main_idtf: [Delta rule](* <- lang_en;; *);;

definition ->...
(*
	-> rrel_key_sc_element : concept_delta_rule;;
	<= nrel_sc_text_translation: ...(*->rrel_example:[Метод обучения перцептрона по принципу градиентного спуска по поверхности ошибки.](*<-lang_ru;;*);;*);;
	=> nrel_main_idtf: [Определение (Дельта правило.)](*<- lang_ru;;*);;
	=> nrel_using_constants: ...
	(*
	   -> concept_method;;
	   -> concept_training;;
	   -> concept_perceptron;;
	   -> concept_principle;;
	   -> concept_descent;;
	   -> concept_surface;;
	   -> concept_error;;
	*);;
*);;

statement ->...
(*
	-> rrel_key_sc_element : concept_delta_rule;;
	<= nrel_sc_text_translation: ...(*->rrel_example:[Его дальнейшее развитие привело к созданию метода обратного распространения ошибки.](*<-lang_ru;;*);;*);;
	=> nrel_main_idtf: [Утверждение(Дельта правило.)](*<- lang_ru;;*);;
	=> nrel_using_constants: ...
	(*
	   -> concept_growth;;
	   -> concept_method;;
	   -> concept_backpropagation_method;;
	   -> concept_error;;
	   -> nrel_lead;;
	*);;
*);;


concept_delta_rule
	<- rrel_explored_concept: section_subject_domain_of_algorithms_and_functions;;
