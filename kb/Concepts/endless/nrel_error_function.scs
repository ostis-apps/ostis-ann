nrel_error_function
	<- sc_node_norole_relation;
	=> nrel_main_idtf: [error function*] (* <- lang_en;; *);
	=> nrel_main_idtf: [функция ошибки*] (* <- lang_ru;; *);;


nrel_error_function => nrel_definitional_domain: ...
	(*
		<= nrel_combination: ...
			(*
				-> neural_network_in_graphical_representation (* <= nrel_first_domain: nrel_error_function;; *);;
				-> loss_function (* <= nrel_second_domain: nrel_error_function;; *);;
			*);;
	*);;


nrel_error_function
	<- binary_relation;
	<- oriented_relation;
	<- antireflexive_relation;
	<- antisymmetric_relation;
	<- antitransitive_relation;;


definition -> ...
	(*
		=> nrel_main_idtf: [Опр.(функция ошибки*)] (* <-lang_ru;; *);;
		-> rrel_key_sc_element: nrel_error_function;;

		<= nrel_using_constants: ...
			(*
				-> loss_function;;	
				-> nrel_function_minimization;;
				-> concept_supervised_learning;;
				-> nrel_output_signal_vector;;
				-> vector;;
			*);;

		<= nrel_sc_text_translation: ...
			(*
				->[Функция ошибок - целевая функция, требующая минимизации в процессе обучения с учителем и вычисляющая расстояние между фактическим выходным вектором нейронной сети и заранее известным желаемым вектором] (* <- lang_ru;; *);;
			*);;
	*);;


affirmation -> ...
	(*
		-> rrel_key_sc_element: nrel_error_function;;

		<= nrel_sc_text_translation: ...
			(*
				-> [Применение градиентных методов оптимизации обучения возможно только в том случае, если существует эффективный способ нахождения градиента функции ошибки] (* <- lang_ru;; *);;
			*);;

		=> nrel_main_idtf: [Утв.(функция ошибки*, нейронная сеть, обучение, градиентный метод оптимизации, градиент функции*)] (* <- lang_ru;; *);;
	*);;

nrel_error_function -> rrel_example: (Neural_network_equivalent => Function_F);;

Neural_network_equivalent <- neural_network_in_graphical_representation;;
Function_F <- loss_function;;
