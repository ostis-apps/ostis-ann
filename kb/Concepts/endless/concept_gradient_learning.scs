concept_gradient_learning_algorithm
	<- sc_node_not_relation;
	=> nrel_main_idtf: [градиентное обучение] (* <- lang_ru;; *);
	=> nrel_main_idtf: [gradient learning] (* <- lang_en;; *);;


concept_learning_algorithm => nrel_subdividing: ... (*
	<- concept_gradient_learning_algorithm;;
	<- concept_layer_learning_algorithm;;
*);;


definition -> ...
	(*
		-> rrel_key_sc_element: concept_gradient_learning_algorithm;;
		
		=> nrel_main_idtf: [Опр.(градиентное обучение)] (* <- lang_ru;; *);;

		<= nrel_using_constants: ...
			(*
				-> concept_gradient_descent;;
				-> nrel_error_function;;
				-> nrel_function_minimization;;
				-> neural_network_in_graphical_representation;;
			*);;

		<= nrel_sc_text_translation: ...
			(*
				-> [Градиентное обучение- общий способ оптимизации нейронной сети, в котором минимизация функции ошибки осуществляется по методу градиентного спуска] (* 
						<- lang_ru;; 
					*);;
			*);;
	*);;


affirmation -> ...
	(*
		-> rrel_key_sc_element: concept_gradient_learning_algorithm;;

		=> nrel_main_idtf: [Утв.(градиентное обучение, персептрон, алгоритм обратного распространения ошибки)] (* <- lang_ru;; *);;

		<= nrel_sc_text_translation: ...
			(*
				-> [Примером градиентного обучения многослойного персептрона служит семейство методов обратного распространения ошибки] (* <- lang_ru;; *);;
			*);;
	*);;

concept_gradient_learning_algorithm <- rrel_explored_concept: subject_domain_of_algebraic_structures;;

